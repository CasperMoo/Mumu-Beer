{"version":3,"sources":["serviceWorker.js","redux/state.ts","components/PageActions.ts","components/PageReducers.ts","components/PageSaga.ts","redux/reducer.ts","components/PageComponent.tsx","components/PageContainer.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","INITIAL_STATE","Immutable","todo","createActions","addTodo","fetchJSON","updateResponse","prefix","Types","Creators","HANDLERS","ADD_TODO","state","text","todos","concat","merge","UPDATE_RESPONSE","response","fetchApi","PageSaga","action","timestamp","put","call","simulateRequest","timeout","Promise","resolve","reject","setTimeout","takeLatest","FETCH_JSON","Reducers","createReducer","Sagas","all","PageComponent","props","onChange","event","setState","inputValue","target","value","style","flex","Group","span","this","type","onClick","map","Item","Date","getTime","React","PureComponent","VisibleTodoList","connect","dispatch","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","store","createStore","run","ReactDOM","render","PageContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gECXOC,E,MAAgBC,GAAiB,CAC5CC,KAAM,K,UCN2BC,wBACjC,CACEC,QAAS,CAAC,QACVC,UAAW,CAAC,aACZC,eAAgB,CAAC,aAEnB,CACEC,OAAQ,YAPGC,E,EAAAA,MAAOC,E,EAAAA,SCkBPC,GALM,mBAClBF,EAAMG,UAbO,WAAwE,IAAvEC,EAAsE,uDAA9CZ,EAA8C,yCAA7Ba,EAA6B,EAA7BA,KAClDC,EAAQF,EAAMV,KAAKa,OAAO,CAACF,IACjC,OAAOD,EAAMI,MAAM,CAAEd,KAAMY,OAUR,cAElBN,EAAMS,iBATc,WAGjB,IAFJL,EAEG,uDAFqBZ,EAErB,yCADDkB,EACC,EADDA,SAEF,OAAON,EAAMI,MAAM,CAAEE,gBAGF,G,mBCXXC,G,WAaAC,GAbV,SAAUD,EAASE,GAAnB,uEAEE,OADMC,EAAYD,EAAOC,UAD3B,SAEQC,YAAId,EAASH,eAAT,gCAAiDgB,KAF7D,OAGE,OAHF,SAGQE,YAAKC,EAAiB,KAH9B,OAIE,OAJF,SAIQF,YAAId,EAASH,eAAT,SAJZ,uCAOA,SAASmB,EAAgBC,GACvB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,WAAWF,EAASF,MAIxB,SAAUN,IAAV,iEACE,OADF,SACQW,YAAWvB,EAAMwB,WAAYb,GADrC,uCAIeC,QCfFa,EAAWC,wBAAclC,EAAeU,GAExCyB,EAAK,UAAG,SAARA,IAAQ,iEACnB,OADmB,SACbC,YAAI,CAAChB,MADQ,oCAARe,M,+ECOQE,E,kDACnB,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAMRC,SAAW,SAACC,GAAgD,IAAD,EAEzD,EAAKC,SAAS,CAAEC,WAAU,OAAEF,QAAF,IAAEA,GAAF,UAAEA,EAAOG,cAAT,aAAE,EAAeC,SAP3C,EAAKhC,MAAQ,CACX8B,WAAY,IAHU,E,qDAYhB,IAAD,OACP,OACE,yBAAKG,MAAO,CAAEC,KAAM,IAClB,kBAAC,IAAMC,MAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAM,GACT,kBAAC,IAAD,CAAOJ,MAAOK,KAAKrC,MAAM8B,WAAYH,SAAUU,KAAKV,YAEtD,kBAAC,IAAD,CACEW,KAAK,UACLC,QAAS,kBAAM,EAAKb,MAAMlC,QAAQ,EAAKQ,MAAM8B,YAAc,wBAF7D,kBAQJ,kBAAC,IAAD,KACGO,KAAKX,MAAMxB,MAAMsC,KAAI,SAAAlD,GAAI,OACxB,kBAAC,IAASmD,KAAV,KAAgBnD,OAGpB,kBAAC,IAAD,CAAQgD,KAAK,UAAUC,QAAS,kBAAM,EAAKb,MAAMjC,WAAU,IAAIiD,MAAOC,aAAtE,SAGA,6BAAMN,KAAKX,MAAMpB,e,GArCkBsC,IAAMC,eCKlCC,EAFSC,aAdA,SAAC/C,GACvB,MAAO,CACLE,MAAOF,EAAMV,KACbgB,SAAUN,EAAMM,aAIO,SAAC0C,GAC1B,MAAO,CACLxD,QAAS,SAACS,GAAD,OAAkB+C,EAASnD,EAASL,QAAQS,KACrDR,UAAW,SAACiB,GAAD,OAAuBsC,EAASnD,EAASJ,UAAUiB,QAI1CqC,CAA6CtB,GCJ/DwB,G,cAAoBjE,QAAWA,OAAekE,sCAAyCC,KACvFC,EAAiBC,cAEjBC,EAAWL,EAAiBM,YAAgBH,IAC5CI,EAAQC,YAAYpC,EAAUiC,GACpCF,EAAeM,IAAInC,GAEnBoC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAACK,EAAD,OAEFC,SAASC,eAAe,SR0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5959291a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Immutable from 'seamless-immutable';\n\nexport interface State {\n  todo: Array<string>,\n  response?: string\n}\n\nexport const INITIAL_STATE = Immutable<State>({\n  todo: []\n})\n\nexport type ImmutableState = Immutable.ImmutableObject<State>","import { createActions } from 'reduxsauce'\n\nexport const { Types, Creators } = createActions(\n  {\n    addTodo: ['text'],\n    fetchJSON: ['timestamp'],\n    updateResponse: ['response']\n  },\n  {\n    prefix: 'PREFIX_'\n  }\n)\n","import { INITIAL_STATE, ImmutableState } from '../redux/state'\nimport { Types } from './PageActions'\n\nconst addTodo = (state: ImmutableState = INITIAL_STATE, { text }: { text: string }) => {\n  const todos = state.todo.concat([text])\n  return state.merge({ todo: todos })\n}\n\nconst updateResponse = (\n  state: ImmutableState = INITIAL_STATE,\n  { response }: { response: string }\n) => {\n  return state.merge({ response })\n}\n\nexport const HANDLERS = {\n  [Types.ADD_TODO]: addTodo,\n  [Types.UPDATE_RESPONSE]: updateResponse\n}\n\nexport default HANDLERS\n","import { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\nimport { Creators, Types } from './PageActions'\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchApi(action: any) {\n  const timestamp = action.timestamp\n  yield put(Creators.updateResponse(`Loading... Started At ${timestamp}`))\n  yield call(simulateRequest, 3000)\n  yield put(Creators.updateResponse(`Done`))\n}\n\nfunction simulateRequest(timeout: number) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nfunction* PageSaga() {\n  yield takeLatest(Types.FETCH_JSON, fetchApi)\n}\n\nexport default PageSaga\n","import { createReducer } from 'reduxsauce'\nimport { INITIAL_STATE } from './state'\nimport HANDLERS from '../components/PageReducers'\nimport { all } from 'redux-saga/effects'\nimport PageSaga from '../components/PageSaga'\n\nexport const Reducers = createReducer(INITIAL_STATE, HANDLERS)\n\nexport const Sagas = function* () {\n  yield all([PageSaga()])\n}\n","import React from 'react'\nimport { Button, Timeline, Input, Row, Col } from 'antd'\nimport { AnyAction } from 'redux'\n\nexport interface Props {\n  todos: Array<string>\n  response?: string\n  addTodo: (text: string) => AnyAction\n  fetchJSON: (timestamp: number) => AnyAction\n}\n\ninterface State {\n  inputValue: string\n}\n\nexport default class PageComponent extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      inputValue: ''\n    }\n  }\n\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    // alert(event.target.value)\n    this.setState({ inputValue: event?.target?.value })\n  }\n\n  render() {\n    return (\n      <div style={{ flex: 1 }}>\n        <Input.Group>\n          <Row>\n            <Col span={3}>\n              <Input value={this.state.inputValue} onChange={this.onChange} />\n            </Col>\n            <Button\n              type=\"primary\"\n              onClick={() => this.props.addTodo(this.state.inputValue || '默认值')}\n            >\n              新增\n            </Button>\n          </Row>\n        </Input.Group>\n        <Timeline>\n          {this.props.todos.map(todo => (\n            <Timeline.Item>{todo}</Timeline.Item>\n          ))}\n        </Timeline>\n        <Button type=\"primary\" onClick={() => this.props.fetchJSON(new Date().getTime())}>\n          fetch\n        </Button>\n        <div>{this.props.response}</div>\n      </div>\n    )\n  }\n}\n","import { connect } from 'react-redux'\nimport PageComponent from './PageComponent'\nimport { Creators } from './PageActions'\n\nconst mapStateToProps = (state: any) => {\n  return {\n    todos: state.todo,\n    response: state.response\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    addTodo: (text: string) => dispatch(Creators.addTodo(text)),\n    fetchJSON: (timestamp: number) => dispatch(Creators.fetchJSON(timestamp))\n  }\n}\n\nconst VisibleTodoList = connect(mapStateToProps, mapDispatchToProps)(PageComponent)\n\nexport default VisibleTodoList\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport * as serviceWorker from './serviceWorker'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport { Reducers, Sagas } from './redux/reducer'\nimport PageContainer from './components/PageContainer'\n\nimport './index.css'\nimport 'antd/dist/antd.css'\n\nconst composeEnhancers = (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose\nconst sagaMiddleware = createSagaMiddleware()\n\nconst enhancer = composeEnhancers(applyMiddleware(sagaMiddleware))\nconst store = createStore(Reducers, enhancer)\nsagaMiddleware.run(Sagas)\n\nReactDOM.render(\n  <Provider store={store}>\n    <PageContainer />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}